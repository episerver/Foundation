@using System.Web.Mvc.Html
@using EPiServer.Shell.Web.Mvc.Html
@using System

@model VirtualTemplates.UI.Models.VirtualTemplatesListViewModel

@{
    Layout = "_VirtualTemplatesRoot.cshtml";
}

<div class="card-body">

    @if (!String.IsNullOrEmpty(Model.ConfirmMessage))
    {
        <div class="alert alert-success" id="divAlert">
            @Html.Raw(Model.ConfirmMessage)

            @if (!string.IsNullOrEmpty(Model.LastActionPath))
            {
                @Html.ActionLink(Html.TranslateFallback("/virtualtemplatesystem/buttons/editnow", "Edit Now"), "Edit", new { VirtualPath = @Model.LastActionPath }, new { @class = "btn btn-light" })
            }

        </div>
    }

    @if (!String.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger" id="divAlert">
            @Html.Raw(Model.ErrorMessage)
        </div>
    }

    <div class="pb-2">
        <span class="radio inline">
            @Html.RadioButtonFor(model => model.ShowAllTemplates, false, new { @onclick = "document.location.href = '" + @Url.Action("Index", new { ShowAllTemplates = false }) + "'; " })
            <a href="@Url.Action("Index", new { ShowAllTemplates = false })" style="color: black;">@Html.TranslateFallback("/virtualtemplatesystem/filters/templatessavedinrespository", "Edited online")</a>
        </span>
        <span class="radio inline">
            @Html.RadioButtonFor(model => model.ShowAllTemplates, true, new { @onclick = "document.location.href = '" + @Url.Action("Index", new { ShowAllTemplates = true }) + "'; " })
            <a href="@Url.Action("Index", new { ShowAllTemplates = true })" style="color: black;">
                @Html.TranslateFallback("/virtualtemplatesystem/filters/showalltemplates", "Show all available templates")
            </a>
        </span>
        <span class="checkbox inline">
            @Html.CheckBoxFor(x => x.SearchFileNamesOnly)
            @Html.LabelFor(x => x.SearchFileNamesOnly, Html.TranslateFallback("/virtualtemplatesystem/filters/searchfilenamesonly", "Search in file names only"))
        </span>
    </div>

    <form id="resourceFilterForm">
        <div class="form-group">
            <input id="searchBox" type="search" value="@Model.LastSearch" class="form-control search-input searchBox fileSearch" 
                   placeholder="@Html.TranslateFallback("/virtualtemplatesystem/filters/searchboxplaceholder", "Search")" />
        </div>
    </form>

    <table id="resourceList" class="table">

        <thead>
            <tr>
                <th scope="col">Path</th>
                <th scope="col">Changed by</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>

        <tbody>

            @{
                int count = 0;
            }
            @foreach (var item in Model.TemplateList)
            {
                <tr class="resource" data-virtualpath='@item.FilePath'>
                    <td class="align-middle">
                        @if (item.IsVirtual)
                        {
                            @Html.ActionLink(item.FilePath, "Edit", new { VirtualPath = @item.FilePath }, new { @class = "templateLink" })
                        }
                        else
                        {
                            @Html.ActionLink(item.FilePath, "Display", new { VirtualPath = @item.FilePath }, new { @class = "templateLink" })
                        }
                    </td>
                    <td class="align-middle">
                        @if (item.IsVirtual)
                        {
                            <button type="button"
                                    class="btn btn-light btn-history"
                                    data-placement="bottom"
                                    data-container="body"
                                    data-html="true"
                                    data-toggle="popover"
                                    title="5 most recent versions"
                                    data-template="&lt;div class=&quot;popover shadow-lg&quot; role=&quot;tooltip&quot;&gt;&lt;div class=&quot;arrow&quot;&gt;&lt;/div&gt;&lt;h3 class=&quot;popover-header&quot;&gt;&lt;/h3&gt;&lt;div class=&quot;popover-body&quot;&gt;&lt;/div&gt;&lt;/div&gt;"
                                    data-content="@{ Html.RenderPartial("Shared/VersionList", item); }">
                                @item.ChangedBy <i class="fas fa-caret-down text-dark"></i>
                            </button>
                        }
                    </td>
                    <td class="action-buttons">
                        @if (!item.IsVirtual)
                        {
                            @Html.ActionLink(Html.TranslateFallback("/virtualtemplatesystem/buttons/view", " "), "Display", new { VirtualPath = @item.FilePath }, new { @class = "btn btn-primary fas fa-file", @data_toggle = "tooltip", @data_placement = "bottom", @title = "View template", @data_delay = "500" })
                            @Html.Raw("&nbsp;")
                            @Html.ActionLink(Html.TranslateFallback("/virtualtemplatesystem/buttons/makevirtual", " "), "MakeVirtual", new { VirtualPath = @item.FilePath }, new { @class = "btn btn-primary fas fa-edit", @data_toggle = "tooltip", @data_placement = "bottom", @title = "Edit online", @data_delay = "500" })
                        }
                        @if (item.IsVirtual)
                        {
                            @Html.ActionLink(Html.TranslateFallback("/virtualtemplatesystem/buttons/edit", " "), "Edit", new { VirtualPath = @item.FilePath }, new { @class = "btn btn-primary fas fa-edit", @data_toggle = "tooltip", @data_placement = "bottom", @title = "Edit template", @data_delay = "500" })
                            @Html.Raw("&nbsp;")
                            @Html.ActionLink(Html.TranslateFallback("/virtualtemplatesystem/buttons/compare", " "), "Compare", new { VirtualPath = @item.FilePath }, new { @class = "btn btn-primary fas fa-exchange-alt", @data_toggle = "tooltip", @data_placement = "bottom", @title = "Compare with default", @data_delay = "500" })
                            @Html.Raw("&nbsp;")
                            if (item.TemplateIsChanged)
                            {
                                @Html.ActionLink(
                                    Html.TranslateFallback("/virtualtemplatesystem/buttons/delete", " "), 
                                    "Revert", 
                                    new { VirtualPath = @item.FilePath }, 
                                    new
                                    {
                                        @class = "btn btn-danger fas fa-undo", 
                                        @data_toggle = "tooltip", @data_placement = "bottom", 
                                        @title = "Revert to default", @data_delay = "500", 
                                        @onclick = "return confirm('" + @Html.TranslateFallback("/virtualtemplatesystem/messages/deleteconfirmprompt", "Are you sure you want to revert to the default implementation? This will move the virtual template to the recycle bin.") + "');"
                                    })
                            }
                            else
                            {
                                @Html.ActionLink(
                                    Html.TranslateFallback("/virtualtemplatesystem/buttons/delete", " "), 
                                    "Revert", 
                                    new { VirtualPath = @item.FilePath }, 
                                    new
                                    {
                                        @class = "btn btn-success fas fa-undo", 
                                        @data_toggle = "tooltip", 
                                        @data_placement = "bottom", 
                                        @title = "Revert to default (safe, template not changed)", 
                                        @data_delay = "500" 
                                    })
                            }
                        }
                    </td>
                </tr>
        count++;
    }

        </tbody>

    </table>

</div>



<script type="text/javascript">

    //$(function () {
    //    $('[data-toggle="tooltip"]').tooltip();
    //});

    // Enable pop overs
    $(function() {

        // Enable tooltips
        $('[data-toggle="tooltip"]').tooltip();

        // Enable pop overs and hide history buttons if another popover is pressed
        $('[data-toggle="popover"]').popover();

        // Hide history button if another popover is pressed
        $('.btn-history').on('click',
            function(e) {
                $('.btn-history').not(this).popover('hide');
            });

        // Link for compare view when viewing history
        $('.btn-history').on('shown.bs.popover',
            function() {
                $('.history-row').on('click',
                    function (e) {
                        var url = '@Url.Action("Compare", "VirtualTemplates")';
                        url += '?virtualpath=' + e.currentTarget.dataset.virtualpath;
                        url += '&leftversion=' + e.currentTarget.dataset.leftversion;
                        url += '&rightversion=' + e.currentTarget.dataset.rightversion;
                        document.location = url;
                    });
            });
    });

    // Hide pop overs if clicked elsewhere on the page
    $(document).on('click', function (e) {
        $('[data-toggle="popover"],[data-original-title]').each(function () {
            //the 'is' for buttons that trigger popups
            //the 'has' for icons within a button that triggers a popup
            if (!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0) {                
                (($(this).popover('hide').data('bs.popover')||{}).inState||{}).click = false  // fix for BS 3.3.6
            }

        });
    });

    $(function () {

        var $filterForm = $('#resourceFilterForm'),
            $filterInput = $filterForm.find('.form-control:first-child'),
            $searchFileNamesOnly = $('#SearchFileNamesOnly'),
            $resourceList = $('#resourceList'),
            $resourceItems = $resourceList.find('.resource');

        function runServerFilter(query, searchFileNamesOnly) {
            if (query.length === 0) {
                $filterInput.removeClass('fileSearch');
                $filterInput.addClass('fileSearching');
                $resourceItems.removeClass('d-none');
                var action = "@Url.Action("ClearSearch", "VirtualTemplates")";
                $.get(action);
                $filterInput.addClass('fileSearch');
                $filterInput.removeClass('fileSearching');
                return;
            }

            // hide everything by default
            $resourceItems.addClass('d-none');
            $filterInput.removeClass('fileSearch');
            $filterInput.addClass('fileSearching');
            // run search
            var action = "@Url.Action("SearchFiles", "VirtualTemplates")";
            $.get(action, { searchString: query, searchFileNamesOnly: searchFileNamesOnly })
                .done(function( data ) {
                    var searchResults = data;
                    searchResults.data.forEach(function(path) {
                        var foundItem = $("[data-virtualpath='" + path + "']");
                        if (foundItem != null) {
                            foundItem.removeClass('d-none');
                        }
                    });
                    $filterInput.addClass('fileSearch');
                    $filterInput.removeClass('fileSearching');
                });
        }

        var t;
        $filterInput.on('input', function () {
            clearTimeout(t);
            t = setTimeout(function () { runServerFilter($filterInput.val(), $searchFileNamesOnly.is(":checked")); }, 750);
        });

        $filterForm.on('submit', function (e) {
            e.preventDefault();
            clearTimeout(t);
            runServerFilter($filterInput.val(), $searchFileNamesOnly.is(":checked"));
        });

        $searchFileNamesOnly.on('change', function (e) {
            clearTimeout(t);
            runServerFilter($filterInput.val(), $searchFileNamesOnly.is(":checked"));
        });

        // Re-run the filter if there is a search value to use
        if ($filterInput.val() !== "") {
            runServerFilter($filterInput.val(), $searchFileNamesOnly.is(":checked"));
        }

    });
</script>