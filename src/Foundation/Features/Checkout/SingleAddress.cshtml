@using Foundation.Features.Checkout.ViewModels

@model CheckoutViewModel

@{
    var index = (int)ViewData["ShipmentIndex"];
    var instorePickupMethod = Model.Shipments[index].ShippingMethods.FirstOrDefault(x => x.IsInstorePickup);
}

<div class="row jsShippingAddressRow @(instorePickupMethod != null && Model.Shipments[index].ShippingMethodId == instorePickupMethod.Id ? "hidden" : "")">
    <div class="col-12 jsChangeAddressCard" data-urlChangeAddress="@Url.Action("ChangeAddress", "Checkout")">
        <ul class="style-list-none">
            <li class="row">
                <div class="col-md-6 col-xs-12 jsShippingAddressSelection">
                    @if (User.Identity.IsAuthenticated)
                    {
                        <div>
                            <label class="checkbox mb-2">
                                @Html.TranslateFallback("/Checkout/Shipment/ExistingAddress", "Ship to existing address")
                                @Html.RadioButtonFor(x => x.Shipments[index].ShippingAddressType, 1, new { @class = "radio jsSingleAddress" })
                                <span class="checkmark"></span>
                            </label>
                            <br />
                        </div>
                    }
                    <div>
                        <label class="checkbox mb-2">
                            @Html.TranslateFallback("/Checkout/Shipment/NewAddress", "Ship to new address")
                            @Html.RadioButtonFor(x => x.Shipments[index].ShippingAddressType, 0, new { @class = "radio jsSingleAddress" })
                            <span class="checkmark"></span>
                        </label>
                    </div>
                </div>
            </li>

            <li class="@(Model.Shipments[index].ShippingAddressType == 1 && User.Identity.IsAuthenticated ? "" : "hidden") jsOldShippingAddressForm jsChangeAddress"
                data-shipmentindex="@index" data-addresstype="@AddressType.Shipping">
                <div class="form-group">
                    @{
                        var values = new List<KeyValuePair<string, string>>();
                        foreach (var a in Model.AvailableAddresses)
                        {
                            values.Add(new KeyValuePair<string, string>(a.Name, a.AddressId));
                        }

                        var defaultShippingAddress = Model.AvailableAddresses.FirstOrDefault(x => x.ShippingDefault);
                        var defaultShippingAddressId = defaultShippingAddress != null ? defaultShippingAddress.AddressId : null;
                    }
                    @(await Component.InvokeAsync("Dropdown", new { list = values,
                        selectedValue = Model.Shipments[index].Address.AddressId ?? defaultShippingAddressId,
                        selectorClassItem = "",
                        name = "Shipments[" + index + "].Address.AddressId"
                    }))
                </div>
            </li>

            <li class="@(Model.Shipments[index].ShippingAddressType == 1 && User.Identity.IsAuthenticated ? "hidden" : "") jsFormInputRequired jsNewShippingAddressForm">
                @Html.HiddenFor(model => model.Shipments[index].Address.Name)
                @Html.HiddenFor(model => model.Shipments[index].Address.DaytimePhoneNumber)
                @Html.HiddenFor(model => model.Shipments[index].Address.BillingDefault)
                @Html.HiddenFor(model => model.Shipments[index].Address.ShippingDefault)
                <ul class="style-list-none">
                    <li>
                        <div class="row">
                            <div class="form-group col-xs-12 col-md-6">
                                @Html.LabelFor(model => model.Shipments[index].Address.FirstName)
                                @Html.TextBoxFor(model => model.Shipments[index].Address.FirstName, new { @class = "textbox jsRequired" })
                                @Html.ValidationMessageFor(model => model.Shipments[index].Address.FirstName)
                            </div>

                            <div class="form-group col-xs-12 col-md-6">
                                @Html.LabelFor(model => model.Shipments[index].Address.LastName)
                                @Html.TextBoxFor(model => model.Shipments[index].Address.LastName, new { @class = "textbox jsRequired" })
                                @Html.ValidationMessageFor(model => model.Shipments[index].Address.LastName)
                            </div>
                        </div>
                    </li>
                    <li>
                        <div class="row">
                            <div class="form-group col-xs-12 col-md-6">
                                @Html.LabelFor(model => model.Shipments[index].Address.Email)
                                @Html.TextBoxFor(model => model.Shipments[index].Address.Email, new { @class = "textbox" })
                                @Html.ValidationMessageFor(model => model.Shipments[index].Address.Email)
                            </div>
                            <div class="form-group col-xs-12 col-md-6">
                                @Html.LabelFor(model => model.Shipments[index].Address.Organization)
                                @Html.TextBoxFor(model => model.Shipments[index].Address.Organization, new { @class = "textbox" })
                                @Html.ValidationMessageFor(model => model.Shipments[index].Address.Organization)
                            </div>
                        </div>
                    </li>
                    <li>
                        <div class="row">
                            <div class="form-group col-xs-12 col-md-6">
                                @Html.LabelFor(model => model.Shipments[index].Address.Line1)
                                @Html.TextBoxFor(model => model.Shipments[index].Address.Line1, new { @class = "textbox jsRequired" })
                                @Html.ValidationMessageFor(model => model.Shipments[index].Address.Line1)
                            </div>
                            <div class="form-group col-xs-12 col-md-6">
                                @Html.LabelFor(model => model.Shipments[index].Address.Line2)
                                @Html.TextBoxFor(model => model.Shipments[index].Address.Line2, new { @class = "textbox" })
                                @Html.ValidationMessageFor(model => model.Shipments[index].Address.Line2)
                            </div>
                        </div>
                    </li>
                    <li>
                        <div class="row">
                            <div class="form-group col-xs-12 col-md-6">
                                @Html.LabelFor(model => model.Shipments[index].Address.City)
                                @Html.TextBoxFor(model => model.Shipments[index].Address.City, new { @class = "textbox jsChangeTaxAddress jsRequired" })
                                @Html.ValidationMessageFor(model => model.Shipments[index].Address.City)
                            </div>
                            <div class="form-group col-xs-12 col-md-6">
                                @Html.LabelFor(model => model.Shipments[index].Address.PostalCode)
                                @Html.TextBoxFor(model => model.Shipments[index].Address.PostalCode, new { @class = "textbox jsChangeTaxAddress jsRequired" })
                                @Html.ValidationMessageFor(model => model.Shipments[index].Address.PostalCode)
                            </div>
                        </div>
                    </li>
                    <li>
                        <div class="row">
                            <div class="form-group col-xs-12 col-md-6 jsCountryRegionContainer">
                                @Html.EditorFor(model => model.Shipments[index].Address.CountryRegion,
                               new { SelectItem = Model.Shipments[index].Address.CountryRegion.Region, Name = "Shipments[" + index + "].Address.CountryRegion.Region" })
                            </div>
                            <div class="form-group col-xs-12 col-md-6">
                                @Html.LabelFor(model => model.Shipments[index].Address.CountryCode)
                                @Html.DisplayFor(model => model.Shipments[index].Address.CountryOptions, "CountryOptions",
                                    new { SelectItem = Model.Shipments[index].Address.CountryCode, Name = "Shipments[" + index + "].Address.CountryCode" })
                                @Html.ValidationMessageFor(model => model.Shipments[index].Address.CountryCode)
                                @Html.Hidden("address-htmlfieldprefix", "Shipments[" + index + "].Address.CountryRegion")
                            </div>
                        </div>
                    </li>
                </ul>
            </li>
        </ul>

        @if (ViewData.ModelState["Shipments[" + index + "].Address.AddressId"] != null && ViewData.ModelState["Shipments[" + index + "].Address.AddressId"].Errors.Count > 0)
        {
            <div class="address-required-message alert alert-danger square-box">
                <h6>Shipping Addresses is required!</h6>
            </div>
        }
    </div>
</div>

