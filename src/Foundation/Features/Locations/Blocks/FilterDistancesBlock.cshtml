@using EPiServer.Find
@using EPiServer.Find.Api.Facets
@using Foundation.Features.Locations.Blocks
@using Foundation.Features.Locations.LocationListPage

@model LocationListViewModel

@{
    var filterString = Model.QueryString["d"];
    var distances = Enumerable.Empty<NumericRange>();
    if (!string.IsNullOrWhiteSpace(filterString))
    {
        var filterDistances = filterString.Split(',').ToList();
        distances = FilterDistancesBlock.ParseDistances(filterDistances);
    }
}

<div class="filterblock" data-filtertype="d" id="distance-filter">
    <h4>
        <i class="fa fa-road"></i>
        @(string.IsNullOrEmpty(ViewData["FilterTitle"].ToString()) ? Html.TranslateFallback("/Locations/Distance", "Distance") : ViewData["FilterTitle"].ToString())
    </h4>
    <ul class="portfolio-cats">
        <li>
            <span>
                <label>
                    <input class="select-all" type="checkbox" @(!distances.Any() ? "checked=checked" : "")>
                    <strong>
                        @(string.IsNullOrEmpty(ViewData["AllConditionText"].ToString()) ? Html.TranslateFallback("/Locations/AllDistances", "All distances") : ViewData["AllConditionText"].ToString())
                    </strong>
                </label>
            </span>
        </li>
        @foreach (var distance in Model.Locations.GeoDistanceFacetFor(x => x.Coordinates).Where(x => x.TotalCount > 0))
        {
            <li>
                <span>
                    <label for="d-@distance.From-@distance.To">
                        <input class="select-some" type="checkbox" id="d-@distance.From-@distance.To" value="@distance.From-@distance.To"
                               @(distances.Any(x => x.From == distance.From && x.To == distance.To) ? "checked=checked" : "")>
                        @distance.From-@distance.To km (@distance.TotalCount)
                    </label>
                </span>
            </li>
        }
    </ul>
</div>