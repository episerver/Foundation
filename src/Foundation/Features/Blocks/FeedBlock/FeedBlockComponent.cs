using EPiServer.Social.ActivityStreams.Core;
using EPiServer.Social.Common;
using Foundation.Social;
using Foundation.Social.Adapters;
using Foundation.Social.Models.ActivityStreams;
using Foundation.Social.Repositories.ActivityStreams;
using Foundation.Social.Repositories.Common;
using Foundation.Social.ViewModels;

namespace Foundation.Features.Blocks.FeedBlock
{
    /// <summary>
    /// The FeedBlockController handles the rendering of feed items, if any, that were automatically
    /// generated by the Social Activity Streams system in response to activities occuring on any 
    /// target items that the logged in user has subscribed to.
    /// </summary>
    public class FeedBlockComponent : SocialBlockComponent<FeedBlock>
    {
        private readonly IUserRepository _userRepository;
        private readonly ICommunityFeedRepository _feedRepository;
        private readonly ICommunityActivityAdapter _communityActivityAdapter;
        private const string ErrorMessage = "Error";
        private const string ErrorGettingUserIdMessage = "There was an error identifying the logged in user. Please make sure you are logged in and try again.";

        /// <summary>
        /// Constructor
        /// </summary>
        public FeedBlockComponent(IUserRepository userRepository, ICommunityFeedRepository communityFeedRepository, IPageRouteHelper pageRouteHelper,
            ICommunityActivityAdapter communityActivityAdapter) : base(pageRouteHelper)
        {
            _userRepository = userRepository;
            _feedRepository = communityFeedRepository;
            _communityActivityAdapter = communityActivityAdapter;
        }

        /// <summary>
        /// Render the feed block frontend view.
        /// </summary>
        /// <param name="currentBlock">The current frontend block instance.</param>
        /// <returns>The action's result.</returns>
        protected override async Task<IViewComponentResult> InvokeComponentAsync(FeedBlock currentBlock)
        {
            // Create a feed block view model to fill the frontend block view
            var blockViewModel = new FeedBlockViewModel(currentBlock)
            {
                Messages = new List<MessageViewModel>()
            };

            // If user logged in, retrieve activity feed for logged in user
            if (User.Identity.IsAuthenticated)
            {
                GetSocialActivityFeed(currentBlock, blockViewModel);
            }

            return await Task.FromResult(View("~/Features/Blocks/FeedBlock/FeedBlock.cshtml", blockViewModel));
        }

        /// <summary>
        /// Gets the activity feed for the logged in user
        /// </summary>
        /// <param name="currentBlock">The current frontend block instance.</param>
        /// <param name="blockViewModel">a reference to the FeedBlockViewModel to 
        /// populate with activity feed for the logged in user and errors, if any</param>
        private void GetSocialActivityFeed(FeedBlock currentBlock, FeedBlockViewModel blockViewModel)
        {

            try
            {
                var userId = _userRepository.GetUserId(User);

                if (!string.IsNullOrWhiteSpace(userId))
                {
                    blockViewModel.Feed = _feedRepository.Get(new CommunityFeedFilter
                    {
                        Subscriber = userId,
                        PageSize = currentBlock.FeedDisplayMax
                    });
                }
                else
                {
                    blockViewModel.Messages.Add(new MessageViewModel(ErrorGettingUserIdMessage, ErrorMessage));
                }
            }
            catch (SocialRepositoryException ex)
            {
                blockViewModel.Messages.Add(new MessageViewModel(ex.Message, ErrorMessage));
            }
        }

        private IEnumerable<CommunityFeedItemViewModel> AdaptFeedItems(
            List<Composite<FeedItem, CommunityActivity>> feedItems) => feedItems.Select(c => _communityActivityAdapter.Adapt(c));
    }
}