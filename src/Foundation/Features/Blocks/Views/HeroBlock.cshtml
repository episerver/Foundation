@using Foundation.Helpers

@model IBlockViewModel<HeroBlock>

@{
    var calloutTextColor = string.Empty;
    if (Model.CurrentBlock.Callout.CalloutTextColor.Equals("Light"))
    {
        calloutTextColor = "color: white";
    }
    else if (Model.CurrentBlock.Callout.CalloutTextColor.Equals("Dark"))
    {
        calloutTextColor = "color: black";
    }

    var blockRatio = string.Empty;
    switch (Model.CurrentBlock.BlockRatio)
    {
        case "10-2":
            blockRatio = "padding-bottom: 20%";
            break;
        case "10-3":
            blockRatio = "padding-bottom: 30%";
            break;
        case "10-10":
            blockRatio = "padding-bottom: 100%";
            break;
        case "10-12.5":
            blockRatio = "padding-bottom: 125%";
            break;
        case "10-15":
            blockRatio = "padding-bottom: 150%";
            break;
        case "10-17.5":
            blockRatio = "padding-bottom: 175%";
            break;
        default:
            blockRatio = "padding-bottom: 50%";
            break;
    }
}

<div blockId="@(((IContent)Model.CurrentBlock).ContentLink.ID)" id="heroBlock-@(((IContent)Model.CurrentBlock).ContentLink.ID)" name="@(((IContent)Model.CurrentBlock).Name)" class="@(Model.CurrentBlock.Padding + " " + Model.CurrentBlock.Margin)">
    <div class="hero-block" style="@blockRatio">
        <div class="hero-block__image" style="background-image: url('@Url.WebPFallbackImageUrl(Model.CurrentBlock.BackgroundImage, 1440, null)'">
        </div>
        @if (!ContentReference.IsNullOrEmpty(Model.CurrentBlock.MainBackgroundVideo))
        {
            <div class="hero-block__video">
                <video autoplay loop playsinline muted>
                    <source src="@Url.ContentUrl(Model.CurrentBlock.MainBackgroundVideo)" type="video/mp4">
                </video>
            </div>
        }

        <div class="hero-block__overlay" style="background-color: @Model.CurrentBlock.BackgroundColor; opacity: @Model.CurrentBlock.BlockOpacity"></div>
        <div class="hero-block__callout" style="justify-content: @Model.CurrentBlock.Callout.CalloutPosition;">
            @if (!Url.ContentUrl(Model.CurrentBlock.Link).IsEmpty() && ContentReference.IsNullOrEmpty(Model.CurrentBlock.MainBackgroundVideo))
            {
                <div class="hero-block-link" onclick="location.href='@Url.ContentUrl(Model.CurrentBlock.Link)'"></div>
            }
            <div class="callout @(Model.CurrentBlock.Callout.Padding + " " + Model.CurrentBlock.Callout.Margin)" style="@calloutTextColor; text-align: @Model.CurrentBlock.Callout.CalloutContentAlignment;">
                @Html.PropertyFor(m => m.CurrentBlock.Callout)
            </div>
        </div>
    </div>
</div>

<style>
            #heroBlock-@(((IContent)Model.CurrentBlock).ContentLink.ID) .callout:after {
                background-color: @Model.CurrentBlock.Callout.BackgroundColor;
                opacity: @Model.CurrentBlock.Callout.CalloutOpacity;
            }
</style>