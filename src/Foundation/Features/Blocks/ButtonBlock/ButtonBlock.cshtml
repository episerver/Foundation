@using Foundation.Features.Blocks.ButtonBlock

@model IBlockViewModel<ButtonBlock>

@{

    Random rnd = new Random();
    int num = rnd.Next();

    var style = "";

    if (Model.CurrentBlock.TextColorOverdrive)
    {
        style += $"color: {Model.CurrentBlock.ButtonTextColor};";

         <style>
            #button-@num a:hover{
                color: @Model.CurrentBlock.ButtonTextHoverColor !important;
            }
        </style>
    }

    if (Model.CurrentBlock.BorderStyleOverdrive)
    {
        style += $"border: {Model.CurrentBlock.BorderWidth}px {Model.CurrentBlock.BorderStyle} {Model.CurrentBlock.ButtonBorderColor};";
        style += $"border-radius: {Model.CurrentBlock.BorderRadius}px;";

        <style>
            #button-@num a:hover{
                border-color: @Model.CurrentBlock.ButtonBorderHoverColor !important;
            }
        </style>
    }

    if (Model.CurrentBlock.ButtonTextUppercase)
    {
        style += $"text-transform:uppercase;";
    }
    if (Model.CurrentBlock.FontSize != 0)
    {
        style += $"font-size: {Model.CurrentBlock.FontSize}px;";
    }

    if (Model.CurrentBlock.ShowTransparentBackground)
    {
        style += "background : transparent;";

        <style>
            #button-@num a:hover{
                background-color: @Model.CurrentBlock.ButtonBackgroundHoverColor !important;
            }
        </style>
    }
    else if (Model.CurrentBlock.BackgroundColorOverdrive)
    {
        style += $"background-color:{Model.CurrentBlock.ButtonBackgroundColor};";

        <style>
            #button-@num a:hover{
                background-color: @Model.CurrentBlock.ButtonBackgroundHoverColor !important;
            }
        </style>
    }
}


<div id="button-@num"
     style="background-color: @Model.CurrentBlock.BackgroundColor; opacity:@Model.CurrentBlock.BlockOpacity;"
     class="@(Model.CurrentBlock.Padding + " " + Model.CurrentBlock.Margin)">
    <a style="@style"
       title="@Model.CurrentBlock.ButtonText" class="btn btn-primary @Model.CurrentBlock.ButtonStyle @Model.CurrentBlock.TextPadding"
       href="@Url.ContentUrl(Model.CurrentBlock.ButtonLink)" @Html.EditAttributes(m => m.CurrentBlock.ButtonText)>
        @{
            var buttonText = string.IsNullOrWhiteSpace(Model.CurrentBlock.ButtonText)
                ? "Button text"
                : Model.CurrentBlock.ButtonText;
        }
        @buttonText
    </a>
    <p>@Html.PropertyFor(m => m.CurrentBlock.ButtonCaption)</p>
</div>