@using Foundation.Features.Blocks.ButtonBlock

@model IBlockViewModel<ButtonBlock>

@{
    var style = "";

    if (Model.CurrentBlock.TextColorOverdrive)
    {
        style += $"color: {Model.CurrentBlock.ButtonTextColor};";
    }

    if (Model.CurrentBlock.BorderStyleOverdrive)
    {
        style += $"border: {Model.CurrentBlock.BorderWidth}px {Model.CurrentBlock.BorderStyle} {Model.CurrentBlock.ButtonBorderColor};";
    }

    if (Model.CurrentBlock.ShowTransparentBackground)
    {
        style += "background : transparent;";
    }
    else if (Model.CurrentBlock.BackgroundColorOverdrive)
    {
        style += $"background-color:{Model.CurrentBlock.ButtonBackgroundColor};";
    }
}

<div style="background-color: @Model.CurrentBlock.BackgroundColor; opacity:@Model.CurrentBlock.BlockOpacity;"
     class="@(Model.CurrentBlock.Padding + " " + Model.CurrentBlock.Margin)">
    <a style="@style"
       title="@Model.CurrentBlock.ButtonText" class="button-origin @Model.CurrentBlock.ButtonStyle"
       href="@Url.ContentUrl(Model.CurrentBlock.ButtonLink)" @Html.EditAttributes(m => m.CurrentBlock.ButtonText)>
        @{
            var buttonText = string.IsNullOrWhiteSpace(Model.CurrentBlock.ButtonText)
                ? "Button text"
                : Model.CurrentBlock.ButtonText;
        }
        @buttonText
    </a>
    <p>@Html.PropertyFor(m => m.CurrentBlock.ButtonCaption)</p>
</div>