@using EPiServer.Web
@using EPiServer.Web.Routing.Segments.Internal
@using Foundation.Helpers

@model FoundationPageData

@Html.FullRefreshPropertiesMetaData(new[] { "PageImage" })

@{
    var textStyle = "";
    if (!string.IsNullOrEmpty(Model.TeaserColorTheme))
    {
        if (Model.TeaserColorTheme.Equals("Light"))
        {
            textStyle = "teaser-text--white";
        }
        else
        {
            textStyle = "teaser-text--black";
        }
    }

    var teaserRatio = string.Empty;
    switch (Model.TeaserRatio)
    {
        case "5:1":
            teaserRatio = "padding-bottom: 20%";
            break;
        case "4:1":
            teaserRatio = "padding-bottom: 25%";
            break;
        case "3:1":
            teaserRatio = "padding-bottom: 33%";
            break;
        case "16:9":
            teaserRatio = "padding-bottom: 55%";
            break;
        case "3:2":
            teaserRatio = "padding-bottom: 65%";
            break;
        case "4:3":
            teaserRatio = "padding-bottom: 75%";
            break;
        case "1:1":
            teaserRatio = "padding-bottom: 100%";
            break;
        case "2:3":
            teaserRatio = "padding-bottom: 150%";
            break;
        case "9:16":
            teaserRatio = "padding-bottom: 175%";
            break;
        default:
            teaserRatio = "padding-bottom: 50%";
            break;
    }
}
<div class="@Model.Padding @Model.Margin">
    <div class="teaser @Model.ThemeCssClass @Model.AlignmentCssClass @(Model.ApplyHoverEffect && RequestSegmentContext.CurrentContextMode != ContextMode.Edit ? "teaser--hover-effect" : "teaser--show-details")" style="@teaserRatio">
        <div class="teaser__image" @Html.EditAttributes(m => m.PageImage)
             style="background-image: url('@Url.WebPFallbackImageUrl(Model.PageImage, 1440, null)'">
        </div>
        @if (!ContentReference.IsNullOrEmpty(Model.TeaserVideo) && ContentReference.IsNullOrEmpty(Model.PageImage))
        {
            <div class="teaser__video">
                <video autoplay loop playsinline muted>
                    <source src="@Url.ContentUrl(Model.TeaserVideo)" type="video/mp4">
                </video>
            </div>
        }
        <div class="screen-width-wrapper">
            <div class="teaser-text @textStyle screen-width-container">
                @if (!String.IsNullOrWhiteSpace(Model.TeaserTitle))
                {
                    <h2 @Html.EditAttributes(x => x.TeaserTitle)>@Model.TeaserTitle</h2>
                }
                else
                {
                    <h2 @Html.EditAttributes(x => x.PageName)>@Model.PageName</h2>
                }
                <div class="teaser-text__details">
                    @if (!String.IsNullOrWhiteSpace(Model.TeaserText))
                    {
                        <p @Html.EditAttributes(x => x.TeaserText)>@Model.TeaserText</p>
                    }
                    @if (!String.IsNullOrWhiteSpace(Model.TeaserButtonText))
                    {
                        <a class="@Model.TeaserButtonStyle" href="@Url.ContentUrl(Model.ContentLink)" @Html.EditAttributes(x => x.TeaserButtonText)>@Model.TeaserButtonText</a>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
