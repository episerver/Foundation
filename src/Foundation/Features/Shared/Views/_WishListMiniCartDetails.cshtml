@using Foundation.Features.Header

@model MiniWishlistViewModel

<div class="menu_top" id="wishlist">
    <div class="top-cart-contain pull-right">
        <div class="mini-cart">
            <div class="basket">
                <a href="#" class="toggle-btn icon-svg">
                    <svg viewBox="0 0 32 32">
                        <use xlink:href="#icon-cart"></use>
                    </svg>
                    <span>@Model.ItemCount.ToString("0")</span>
                    <div class="icon-text">@(string.IsNullOrEmpty(Model.Label) ? Model.Label : Html.TranslateFallback("/Cart/Labels/Wishlist", "Wish list"))</div>
                </a>
            </div>
            <div class="top-cart-content">
                <div class="block-subtitle">
                    <div class="top-subtotal">
                        @Model.ItemCount.ToString("0") items
                    </div>
                    <div class="pull-right">
                        <div class="basket">
                            <a href="#" class="toggle-btn">
                                My Wishlist
                            </a>
                        </div>
                    </div>
                </div>
                <ul class="mini-products-list" id="wishlist-sidebar">
                    @foreach (var cartItem in Model.Items)
                    {
                        <li class="item">
                            @using (Html.BeginForm("ChangeCartItem", "Wishlist", FormMethod.Post, new { data_container = "WishListMiniCart" }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.Hidden("code", cartItem.Code)
                                @Html.Hidden("quantity", "0")

                                <div class="item-inner">
                                    <a href="@cartItem.Url" class="product-image" title="@cartItem.DisplayName">
                                        <picture>
                                            <source data-srcset="@(cartItem.Entry.GetDefaultAsset<IContentImage>())?format=webp" type="image/webp">
                                            <img data-src="@(cartItem.Entry.GetDefaultAsset<IContentImage>())" class="lazyload" alt="@cartItem.DisplayName" />
                                        </picture>
                                    </a>
                                    <div class="product-details">
                                        @if (!(bool)(ViewData["IsReadOnly"] == null ? false : ViewData["IsReadOnly"]))
                                        {
                                            <div class="access">
                                                <button role="button" class="btn-remove jsRemoveCartItem">Delete</button>
                                            </div>
                                        }
                                        <strong>@cartItem.Quantity.ToString("0")</strong> x <span class="price">@Helpers.RenderMoney(cartItem.DiscountedPrice.GetValueOrDefault())</span>
                                        <p class="product-name">
                                            <a href="@cartItem.Url">@cartItem.DisplayName</a>
                                        </p>
                                    </div>
                                </div>
                            }
                        </li>
                    }
                </ul>
                @if (Model.ItemCount > 0)
                {
                    <div>
                        <div class="col-md-6 col-xs-12 actions">
                            <button class="view-cart button-dark button--sm" title="View Cart" type="button" onclick="window.location.href = '@Url.ContentUrl(Model.WishlistPage)'">
                                @Html.TranslateFallback("/Header/MiniCart/Button/ViewWishlist", "View Wishlist")
                            </button>
                        </div>

                    </div>
                }
            </div>
        </div>
    </div>
    <input type="hidden" id="CartItemCount" value="@Model.ItemCount.ToString("0")" />
</div>

@*<div class="product-dropdown cart-dropdown product-row list-unstyled">

        <input type="hidden" id="CartItemCount" value="@Model.ItemCount.ToString("0.####")" />
        <input type="hidden" id="CartTotalAmount" value="@Model.Total.ToString()" />

        <div class="cart-dropdown__product-container">
            <ul class="list-unstyled">
                @foreach (var cartItem in Model.CartItems)
                {
                    <li class="list-group-item product-item @cartItem.Code">
                        @using (Html.BeginForm("ChangeCartItem", "WishList", FormMethod.Post, new { data_container = "WishListMiniCart" }))
                        {
                            <div class="media">
                                <div class="media-left">
                                    <a href="@cartItem.Url"><img src="@(cartItem.Entry.GetDefaultAsset<IContentImage>())" alt="@cartItem.DisplayName" class="media-object product-row__item__image" /></a>
                                </div>
                                <div class="media-body">
                                    <div class="row">
                                        <div class="col-md-12">
                                            <a href="@cartItem.Url" class="link--black"><h4 class="product-row__item__title">@cartItem.DisplayName</h4></a>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-5">
                                            <strong>@Html.TranslateFallback("/ProductPage/Size", "Size")</strong>
                                            @if ((bool)(ViewData["IsReadOnly"] == null ? false : ViewData["IsReadOnly"]))
                                            {
                                                @Helpers.RenderSize(cartItem.Entry)
                                            }
                                            else
                                            {
                                                @Helpers.RenderSizeDropDown(cartItem)
                                            }
                                        </div>
                                        <div class="col-md-4 text-right product-col-price">
                                            <h4 class="product-row__item__price product-price">@cartItem.DiscountedPrice.ToString()</h4>
                                        </div>
                                        <div class="col-md-2 product-col-remove">
                                            @if (!(bool)(ViewData["IsReadOnly"] == null ? false : ViewData["IsReadOnly"]))
                                            {
                                                <button role="button" class="btn btn-gray-lighter btn-sm jsRemoveCartItem"><i class="glyphicon glyphicon-remove"></i></button>
                                            }
                                        </div>
                                    </div>
                                </div>
                                @Html.Hidden("quantity", cartItem.Quantity.ToString("0"), new { @class = "jsChangeCartItem" })
                                @Html.Hidden("code", cartItem.Code)
                            </div>
                        }
                    </li>
                }
            </ul>
        </div>
        <div>
            <ul class="list-unstyled cart-dropdown__button-list">
                <li class="cart-item">
                    <button type="button" class="btn btn-block btn-primary" aria-expanded="false" onclick="window.location.href = '@Url.ContentUrl(Model.WishListPage)'">
                        @if (Model.HasOrganization)
                        {
                            @Html.TranslateFallback("/WishList/Button/GotoOrderpadPage", "Go to orderpad")
                        }
                        else
                        {
                            @Html.TranslateFallback("/WishList/Button/GoToWishlistPage", "Go to wishlist")
                        }
                    </button>
                </li>
                <li class="cart-item">
                    <button type="button" class="btn btn-block btn-default jsWishListContinueShopping" aria-expanded="false">@Html.TranslateFallback("/Header/MiniCart/Button/Close", "Close")</button>
                </li>
            </ul>
        </div>
    </div>*@