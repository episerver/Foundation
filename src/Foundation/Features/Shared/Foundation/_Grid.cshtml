@using NonFactors.Mvc.Grid;
@using System.Web.Mvc;

@model IGrid

<div id="@Model.Id" class="mvc-grid mvc-grid-@(Model.FilterMode.ToString().ToLower())-mode" data-name="@Model.Name" data-filter-mode="@Model.FilterMode" data-source-url="@Model.SourceUrl">
    <table@(Model.Attributes)>
        <thead>
            <tr class="mvc-grid-headers@(Model.FilterMode == GridFilterMode.Header ? " mvc-grid-row-filters" : "")">
                @foreach (IGridColumn column in Model.Columns)
                {
                    String hidden = column.IsHidden ? "mvc-grid-hidden" : "";
                    String sortable = column.Sort.IsEnabled == true ? "sortable" : "";
                    Boolean filterApplied = (column.Filter.First ?? column.Filter.Second) != null;
                    String filterable = column.Filter.IsEnabled == true && !String.IsNullOrEmpty(column.Filter.Name) ? "filterable" : "";

                    <th class="@column.CssClasses @filterable @sortable @column.Sort.Order.ToString().ToLower() @hidden" data-name="@column.Name" data-filter="@column.Filter.IsEnabled" data-filter-applied="@filterApplied" data-filter-name="@column.Filter.Name" data-filter-type="@column.Filter.Type" data-filter-default-method="@column.Filter.DefaultMethod" data-sort="@column.Sort.IsEnabled" data-sort-order="@column.Sort.Order" data-sort-first="@column.Sort.FirstOrder">
                        @if (column.Filter.IsEnabled == true && !String.IsNullOrEmpty(column.Filter.Name) && Model.FilterMode != GridFilterMode.Row)
                        {
                            if (Model.FilterMode == GridFilterMode.Header)
                            {
                                String title = column.Title as String ?? "";
                                Int32 size = title.Length > 0 ? title.Length : 20;
                                String[] values = column.Filter.First != null ? column.Filter.First.Values ?? new String[0] : new String[0];
                                values = column.Filter.Options.Any() ? column.Filter.Options.Where(option => values.Contains(option.Value)).Select(option => option.Text).ToArray() : values;

                                <div>
                                    @if (column.Filter.Options.Any())
                                    {
                                        values = column.Filter.Options.Where(option => values.Contains(option.Value)).Select(option => option.Text).ToArray();

                                        <input class="mvc-grid-value" value="@String.Join(", ", values)" size="@size" placeholder="@column.Title" tabindex="-1" readonly />
                                    }
                                    else
                                    {
                                        <input class="mvc-grid-value" value="@String.Join(", ", values)" size="@size" placeholder="@column.Title" />
                                    }
                                </div>
                            }
                            else
                            {
                                <span class="mvc-grid-title">@column.Title</span>
                            }

                            <select class="mvc-grid-options">
                                @foreach (SelectListItem option in column.Filter.Options)
                                {
                                    <option value="@option.Value">@option.Text</option>
                                }
                            </select>

                            if (column.Sort.IsEnabled == true)
                            {
                                <button type="button" class="mvc-grid-sort"></button>
                            }

                            <button type="button" class="mvc-grid-filter @(filterApplied ? "applied" : "")"></button>
                        }
                        else
                        {
                            <span class="mvc-grid-title">@column.Title</span>

                            if (column.Sort.IsEnabled == true)
                            {
                                <button type="button" class="mvc-grid-sort"></button>
                            }
                        }
                    </th>
                }
            </tr>
            @if (Model.FilterMode == GridFilterMode.Row)
            {
                <tr class="mvc-grid-row-filters">
                    @foreach (IGridColumn column in Model.Columns)
                    {
                        String hidden = column.IsHidden ? "mvc-grid-hidden" : "";

                        if (column.Filter.IsEnabled == true && !String.IsNullOrEmpty(column.Filter.Name))
                        {
                            String filterApplied = (column.Filter.First ?? column.Filter.Second) != null ? "applied" : "";

                            <th class="filterable @column.CssClasses @hidden">
                                <div>
                                    @if (column.Filter.Options.Any())
                                    {
                                        if (column.Filter.Type == GridFilterType.Multi)
                                        {
                                            String[] values = column.Filter.First != null ? column.Filter.First.Values ?? new String[0] : new String[0];
                                            values = column.Filter.Options.Where(option => values.Contains(option.Value)).Select(option => option.Text).ToArray();

                                            <input class="mvc-grid-value" value="@String.Join(", ", values)" tabindex="-1" readonly />

                                            <select class="mvc-grid-options">
                                                @foreach (SelectListItem option in column.Filter.Options)
                                                {
                                                    <option value="@option.Value">@option.Text</option>
                                                }
                                            </select>
                                        }
                                        else
                                        {
                                            <select class="mvc-grid-value">
                                                @foreach (SelectListItem option in column.Filter.Options)
                                                {
                                                    if (column.Filter.First != null && column.Filter.First.Values.Contains(option.Value))
                                                    {
                                                        <option value="@option.Value" selected>@option.Text</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@option.Value">@option.Text</option>
                                                    }
                                                }
                                            </select>
                                        }
                                    }
                                    else
                                    {
                                        <input class="mvc-grid-value" value="@(column.Filter.First != null ? column.Filter.First.Values[0] : "")" />
                                    }
                                    <button type="button" class="mvc-grid-filter @filterApplied"></button>
                                </div>
                            </th>
                        }
                        else
                        {
                            <th class="@column.CssClasses @hidden"></th>
                        }
                    }
                </tr>
            }
        </thead>
        <tbody>
            @foreach (IGridRow<Object> row in Model.Rows)
            {
                <tr@(row.Attributes)>
                    @foreach (IGridColumn column in Model.Columns)
                    {
                        String classes = column.IsHidden ? column.CssClasses + " mvc-grid-hidden" : column.CssClasses;

                        <td class="@classes">@column.ValueFor(row)</td>
                    }
                    </tr>
                }
            @if (!Model.Rows.Any() && Model.EmptyText != null)
            {
                <tr class="mvc-grid-empty-row">
                    <td colspan="@Model.Columns.Count()">
                        @Model.EmptyText
                    </td>
                </tr>
            }
    </tbody>
    @if (!String.IsNullOrEmpty(Model.FooterPartialViewName))
    {
        <tfoot>
            @Html.Partial(Model.FooterPartialViewName, Model)
        </tfoot>
    }
    </table>
    @if (Model.Pager != null)
    {
        @Html.Partial(Model.Pager.PartialViewName, Model.Pager)
    }
</div>